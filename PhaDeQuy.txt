Stack<int> st = new Stack<int>();
            st.Push(1);
            st.Push(2);
            st.Push(3);
            int so = st.Pop();
            Console.Write(so);
            Console.ReadKey();
//////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication4
{
    class SelfRef
    {
        public int ID { get; set; }
        public int PID { get; set; }
        public string Describ { get; set; }
        public void Show()
        {
            Console.WriteLine("{0} -- {1} -- {2}", ID, PID, Describ);
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            #region Data
            List<SelfRef> lst = new List<SelfRef>(){
                new SelfRef(){ID=1,PID=0,Describ = "M1"},
                new SelfRef(){ID=2,PID=1,Describ = "M2"},
                new SelfRef(){ID=3,PID=1,Describ = "M3"},
                new SelfRef(){ID=4,PID=1,Describ = "M4"},
                new SelfRef(){ID=5,PID=3,Describ = "M5"},
                new SelfRef(){ID=6,PID=3,Describ = "M6"},
                new SelfRef(){ID=7,PID=5,Describ = "M7"},
                new SelfRef(){ID=8,PID=5,Describ = "M8"},
                new SelfRef(){ID=9,PID=2,Describ = "M9"},
                new SelfRef(){ID=10,PID=8,Describ = "M10"},
            };
            #endregion
            #region Resolve
            Stack<SelfRef> stack = new Stack<SelfRef>();
            SelfRef StartingStatus = lst.Find(x => x.ID == 2);
            stack.Push(StartingStatus);
            while (stack.Count > 0)
            {
                SelfRef X = stack.Pop();
                X.Show();
                List<SelfRef> lstSub = lst.FindAll(x => x.PID == X.ID);
                if (lstSub.Count > 0)
                {
                    lstSub.ForEach(x => stack.Push(x));
                }
            }
            #endregion
            Console.ReadKey();
        }
    }
}

/////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication4
{
    class Point
    {
        int[] arrX = new int[] { 0, 1, 0, -1 };
        int[] arrY = new int[] { -1, 0, 1, 0 };
        public int X { get; set; }
        public int Y { get; set; }
        public void Change(int[,] arr)
        {
            arr[X, Y] = 1;
        }
        public int ValueDirection(int[,] arr,int direction)
        {
            return arr[X + arrX[direction], Y + arrY[direction]];
        }
        public Point PointDirection(int[,] arr, int direction)
        {
            if (IsInside(arr))
                return new Point()
                {
                    X = X + arrX[direction],
                    Y = Y + arrY[direction]
                };
            return null;
        }
        public bool IsInside(int[,] arr)
        {
            if (X >= 0 && X < arr.GetLength(0) &&
               Y >= 0 && Y < arr.GetLength(1))
                return true;
            return false;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            int[,] arr = new int[,]{
                {0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,1,1,1,1,0,0},
                {0,0,0,1,0,0,0,1,0,0},
                {0,0,1,0,0,0,0,0,1,0},
                {0,0,0,1,0,0,0,0,1,0},
                {0,0,0,0,1,1,0,0,1,0},
                {0,0,0,0,0,1,0,1,0,0},
                {0,0,1,1,1,0,0,1,0,0},
                {0,0,1,0,0,0,1,1,0,0},
                {0,0,0,1,1,1,0,0,0,0}
            };

            Point StartingPoint = new Point() { X = 4, Y =4 };
            Stack<Point> stack = new Stack<Point>();
            stack.Push(StartingPoint);
            while(stack.Count>0)
            {
                Point crr = stack.Pop();
                crr.Change(arr);
                for (int i = 0; i < 4; i++)
                {
                    Point p = crr.PointDirection(arr, i);
                    if (p!=null && p.IsInside(arr) && 
                        crr.ValueDirection(arr, i) == 0)
                    {
                        stack.Push(p);
                    }
                }
            }
            for (int i = 0; i < arr.GetLength(0); i++)
            {
                for (int j = 0; j < arr.GetLength(1); j++)
                {
                    Console.Write(arr[i, j]);
                }
                Console.WriteLine();
            }
                Console.ReadKey();
        }
    }
}
